
let-it-light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000000c0  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  00000158  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001d3  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000140  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000e787  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000dc  00000000  00000000  0000f0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000f19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002e4  00000000  00000000  0000f1b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ec       	ldi	r30, 0xC0	; 192
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	28 d0       	rcall	.+80     	; 0xaa <main>
  5a:	30 c0       	rjmp	.+96     	; 0xbc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <blink>:

int voltage_config = 0b1;
int on = 0b1;
int off = 0b0;

void blink(int amount) {
  5e:	ac 01       	movw	r20, r24
	for (int i = 0; i < amount; i++) {
  60:	18 16       	cp	r1, r24
  62:	19 06       	cpc	r1, r25
  64:	0c f5       	brge	.+66     	; 0xa8 <blink+0x4a>
  66:	20 e0       	ldi	r18, 0x00	; 0
  68:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(500);
		PORTC = on;
  6a:	a0 e6       	ldi	r26, 0x60	; 96
  6c:	b0 e0       	ldi	r27, 0x00	; 0
		_delay_ms(500);
		PORTC = off;
  6e:	e4 e6       	ldi	r30, 0x64	; 100
  70:	f0 e0       	ldi	r31, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	6f e9       	ldi	r22, 0x9F	; 159
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	91 e0       	ldi	r25, 0x01	; 1
  78:	61 50       	subi	r22, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <blink+0x1a>
  80:	00 c0       	rjmp	.+0      	; 0x82 <blink+0x24>
  82:	00 00       	nop
int off = 0b0;

void blink(int amount) {
	for (int i = 0; i < amount; i++) {
		_delay_ms(500);
		PORTC = on;
  84:	9c 91       	ld	r25, X
  86:	95 bb       	out	0x15, r25	; 21
  88:	6f e9       	ldi	r22, 0x9F	; 159
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	61 50       	subi	r22, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <blink+0x30>
  96:	00 c0       	rjmp	.+0      	; 0x98 <blink+0x3a>
  98:	00 00       	nop
		_delay_ms(500);
		PORTC = off;
  9a:	90 81       	ld	r25, Z
  9c:	95 bb       	out	0x15, r25	; 21
int voltage_config = 0b1;
int on = 0b1;
int off = 0b0;

void blink(int amount) {
	for (int i = 0; i < amount; i++) {
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	3f 4f       	sbci	r19, 0xFF	; 255
  a2:	24 17       	cp	r18, r20
  a4:	35 07       	cpc	r19, r21
  a6:	29 f7       	brne	.-54     	; 0x72 <blink+0x14>
  a8:	08 95       	ret

000000aa <main>:
	}
}

int main (void)
{
	DDRC = voltage_config;
  aa:	80 91 62 00 	lds	r24, 0x0062
  ae:	84 bb       	out	0x14, r24	; 20
	blink(5);
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	d4 df       	rcall	.-88     	; 0x5e <blink>
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
