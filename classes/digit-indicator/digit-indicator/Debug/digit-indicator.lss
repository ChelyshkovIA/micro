
digit-indicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000008e  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000011e  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000dd  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e755  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005c  00000000  00000000  0000ef45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000efa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002e4  00000000  00000000  0000efb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e8       	ldi	r30, 0x8E	; 142
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	1f c0       	rjmp	.+62     	; 0x8a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
	PORTD = port;
}

int main (void)
{
	DDRB  = 0b00000000;
  4e:	17 ba       	out	0x17, r1	; 23
	DDRD  = 0b11111111;
  50:	8f ef       	ldi	r24, 0xFF	; 255
  52:	81 bb       	out	0x11, r24	; 17
	PORTB = 0b11111111;
  54:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00000000;
  56:	12 ba       	out	0x12, r1	; 18

	int counter = 0;
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	30 e0       	ldi	r19, 0x00	; 0
			while (PINB == 0b11111110) continue;
			
			mark_digit(ports[counter]);
			
			if (counter == 9) {
				counter = -1;
  5c:	4f ef       	ldi	r20, 0xFF	; 255
  5e:	9f ef       	ldi	r25, 0xFF	; 255
	PORTD = 0b00000000;

	int counter = 0;
	
	while (true) {
		if (PINB == 0b11111110) {
  60:	86 b3       	in	r24, 0x16	; 22
  62:	8e 3f       	cpi	r24, 0xFE	; 254
  64:	e9 f7       	brne	.-6      	; 0x60 <main+0x12>
			while (PINB == 0b11111110) continue;
  66:	86 b3       	in	r24, 0x16	; 22
  68:	8e 3f       	cpi	r24, 0xFE	; 254
  6a:	e9 f3       	breq	.-6      	; 0x66 <main+0x18>
			
			mark_digit(ports[counter]);
  6c:	f9 01       	movw	r30, r18
  6e:	ee 0f       	add	r30, r30
  70:	ff 1f       	adc	r31, r31
  72:	e0 5a       	subi	r30, 0xA0	; 160
  74:	ff 4f       	sbci	r31, 0xFF	; 255
	0b01111111, // 8
	0b01101111  // 9
};

void mark_digit(int port) {
	PORTD = port;
  76:	80 81       	ld	r24, Z
  78:	82 bb       	out	0x12, r24	; 18
		if (PINB == 0b11111110) {
			while (PINB == 0b11111110) continue;
			
			mark_digit(ports[counter]);
			
			if (counter == 9) {
  7a:	29 30       	cpi	r18, 0x09	; 9
  7c:	31 05       	cpc	r19, r1
  7e:	11 f4       	brne	.+4      	; 0x84 <main+0x36>
				counter = -1;
  80:	24 2f       	mov	r18, r20
  82:	39 2f       	mov	r19, r25
			}
			
			counter++;
  84:	2f 5f       	subi	r18, 0xFF	; 255
  86:	3f 4f       	sbci	r19, 0xFF	; 255
  88:	eb cf       	rjmp	.-42     	; 0x60 <main+0x12>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
