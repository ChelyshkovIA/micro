
button_garland.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e6  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d6  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a8  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e777  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000f1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000002e4  00000000  00000000  0000f1d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	56 c0       	rjmp	.+172    	; 0xe2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <asf.h>
#include <util/delay.h>

int main (void)
{
	DDRB = 0b00000000;
  38:	17 ba       	out	0x17, r1	; 23
	DDRD = 0b11111111;
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	81 bb       	out	0x11, r24	; 17
	
	PORTB = 0b11111111;
  3e:	88 bb       	out	0x18, r24	; 24
		} else {
			PORTD = 0b00000000;
		}
		
		if (PINB == 0b11111101) {
			PORTD = 0b00000001;
  40:	e1 e0       	ldi	r30, 0x01	; 1
			_delay_ms(100);
			PORTD = 0b00000011;
  42:	73 e0       	ldi	r23, 0x03	; 3
			_delay_ms(100);
			PORTD = 0b00000111;
  44:	67 e0       	ldi	r22, 0x07	; 7
			_delay_ms(100);
			PORTD = 0b00001111;
  46:	5f e0       	ldi	r21, 0x0F	; 15
			_delay_ms(100);
			PORTD = 0b00011111;
  48:	4f e1       	ldi	r20, 0x1F	; 31
			_delay_ms(100);
			PORTD = 0b00111111;
  4a:	3f e3       	ldi	r19, 0x3F	; 63
			_delay_ms(100);
			PORTD = 0b01111111;
  4c:	2f e7       	ldi	r18, 0x7F	; 127
			_delay_ms(100);
			PORTD = 0b11111111;
  4e:	9f ef       	ldi	r25, 0xFF	; 255
	DDRD = 0b11111111;
	
	PORTB = 0b11111111;
	
	while (true) {
		if (PINB == 0b11111110) {
  50:	86 b3       	in	r24, 0x16	; 22
  52:	8e 3f       	cpi	r24, 0xFE	; 254
  54:	11 f4       	brne	.+4      	; 0x5a <__SREG__+0x1b>
			PORTD = 0b11111111;
  56:	92 bb       	out	0x12, r25	; 18
			continue;
  58:	fb cf       	rjmp	.-10     	; 0x50 <__SREG__+0x11>
		} else {
			PORTD = 0b00000000;
  5a:	12 ba       	out	0x12, r1	; 18
		}
		
		if (PINB == 0b11111101) {
  5c:	86 b3       	in	r24, 0x16	; 22
  5e:	8d 3f       	cpi	r24, 0xFD	; 253
  60:	b9 f7       	brne	.-18     	; 0x50 <__SREG__+0x11>
			PORTD = 0b00000001;
  62:	e2 bb       	out	0x12, r30	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	a7 ea       	ldi	r26, 0xA7	; 167
  66:	b1 e6       	ldi	r27, 0x61	; 97
  68:	11 97       	sbiw	r26, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <__SREG__+0x2f>
  6e:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b00000011;
  70:	72 bb       	out	0x12, r23	; 18
  72:	a7 ea       	ldi	r26, 0xA7	; 167
  74:	b1 e6       	ldi	r27, 0x61	; 97
  76:	11 97       	sbiw	r26, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <__SREG__+0x3d>
  7c:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b00000111;
  7e:	62 bb       	out	0x12, r22	; 18
  80:	a7 ea       	ldi	r26, 0xA7	; 167
  82:	b1 e6       	ldi	r27, 0x61	; 97
  84:	11 97       	sbiw	r26, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <__SREG__+0x45>
  88:	00 c0       	rjmp	.+0      	; 0x8a <__SREG__+0x4b>
  8a:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b00001111;
  8c:	52 bb       	out	0x12, r21	; 18
  8e:	a7 ea       	ldi	r26, 0xA7	; 167
  90:	b1 e6       	ldi	r27, 0x61	; 97
  92:	11 97       	sbiw	r26, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <__SREG__+0x53>
  96:	00 c0       	rjmp	.+0      	; 0x98 <__SREG__+0x59>
  98:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b00011111;
  9a:	42 bb       	out	0x12, r20	; 18
  9c:	a7 ea       	ldi	r26, 0xA7	; 167
  9e:	b1 e6       	ldi	r27, 0x61	; 97
  a0:	11 97       	sbiw	r26, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <__SREG__+0x61>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <__SREG__+0x67>
  a6:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b00111111;
  a8:	32 bb       	out	0x12, r19	; 18
  aa:	a7 ea       	ldi	r26, 0xA7	; 167
  ac:	b1 e6       	ldi	r27, 0x61	; 97
  ae:	11 97       	sbiw	r26, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <__SREG__+0x6f>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__SREG__+0x75>
  b4:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b01111111;
  b6:	22 bb       	out	0x12, r18	; 18
  b8:	a7 ea       	ldi	r26, 0xA7	; 167
  ba:	b1 e6       	ldi	r27, 0x61	; 97
  bc:	11 97       	sbiw	r26, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <__SREG__+0x7d>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__SREG__+0x83>
  c2:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b11111111;
  c4:	92 bb       	out	0x12, r25	; 18
  c6:	a7 ea       	ldi	r26, 0xA7	; 167
  c8:	b1 e6       	ldi	r27, 0x61	; 97
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <__SREG__+0x8b>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <__SREG__+0x91>
  d0:	00 00       	nop
			_delay_ms(100);
			PORTD = 0b00000000;
  d2:	12 ba       	out	0x12, r1	; 18
  d4:	a7 ea       	ldi	r26, 0xA7	; 167
  d6:	b1 e6       	ldi	r27, 0x61	; 97
  d8:	11 97       	sbiw	r26, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <__SREG__+0x99>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__SREG__+0x9f>
  de:	00 00       	nop
  e0:	b7 cf       	rjmp	.-146    	; 0x50 <__SREG__+0x11>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
