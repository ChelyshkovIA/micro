
delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000254  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000159  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000459  00000000  00000000  00000551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e790  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  0000f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000f29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002e4  00000000  00000000  0000f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	2d d0       	rcall	.+90     	; 0x8e <main>
  34:	34 c0       	rjmp	.+104    	; 0x9e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <blink>:
void mark_blue() {
	PORTD = 0b10;
}

void blink(int amount) {
	for (int i = 0; i < amount; i++) {
  38:	18 16       	cp	r1, r24
  3a:	19 06       	cpc	r1, r25
  3c:	3c f5       	brge	.+78     	; 0x8c <__SREG__+0x4d>
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	30 e0       	ldi	r19, 0x00	; 0
void mark_green() {
	PORTD = 0b1;
}

void mark_blue() {
	PORTD = 0b10;
  42:	52 e0       	ldi	r21, 0x02	; 2
void fade_all() {
	PORTD = 0b0;
}

void mark_green() {
	PORTD = 0b1;
  44:	41 e0       	ldi	r20, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	6f e9       	ldi	r22, 0x9F	; 159
  48:	76 e8       	ldi	r23, 0x86	; 134
  4a:	e1 e0       	ldi	r30, 0x01	; 1
  4c:	61 50       	subi	r22, 0x01	; 1
  4e:	70 40       	sbci	r23, 0x00	; 0
  50:	e0 40       	sbci	r30, 0x00	; 0
  52:	e1 f7       	brne	.-8      	; 0x4c <__SREG__+0xd>
  54:	00 c0       	rjmp	.+0      	; 0x56 <__SREG__+0x17>
  56:	00 00       	nop
#include <asf.h>
#include <util/delay.h>

void fade_all() {
	PORTD = 0b0;
  58:	12 ba       	out	0x12, r1	; 18
  5a:	6f e9       	ldi	r22, 0x9F	; 159
  5c:	76 e8       	ldi	r23, 0x86	; 134
  5e:	e1 e0       	ldi	r30, 0x01	; 1
  60:	61 50       	subi	r22, 0x01	; 1
  62:	70 40       	sbci	r23, 0x00	; 0
  64:	e0 40       	sbci	r30, 0x00	; 0
  66:	e1 f7       	brne	.-8      	; 0x60 <__SREG__+0x21>
  68:	00 c0       	rjmp	.+0      	; 0x6a <__SREG__+0x2b>
  6a:	00 00       	nop
void mark_green() {
	PORTD = 0b1;
}

void mark_blue() {
	PORTD = 0b10;
  6c:	52 bb       	out	0x12, r21	; 18
  6e:	6f e9       	ldi	r22, 0x9F	; 159
  70:	76 e8       	ldi	r23, 0x86	; 134
  72:	e1 e0       	ldi	r30, 0x01	; 1
  74:	61 50       	subi	r22, 0x01	; 1
  76:	70 40       	sbci	r23, 0x00	; 0
  78:	e0 40       	sbci	r30, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <__SREG__+0x35>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <__SREG__+0x3f>
  7e:	00 00       	nop
void fade_all() {
	PORTD = 0b0;
}

void mark_green() {
	PORTD = 0b1;
  80:	42 bb       	out	0x12, r20	; 18
void mark_blue() {
	PORTD = 0b10;
}

void blink(int amount) {
	for (int i = 0; i < amount; i++) {
  82:	2f 5f       	subi	r18, 0xFF	; 255
  84:	3f 4f       	sbci	r19, 0xFF	; 255
  86:	28 17       	cp	r18, r24
  88:	39 07       	cpc	r19, r25
  8a:	e9 f6       	brne	.-70     	; 0x46 <__SREG__+0x7>
  8c:	08 95       	ret

0000008e <main>:
	}
}

int main (void)
{
	DDRD = 0b00000011;
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	81 bb       	out	0x11, r24	; 17

	blink(5);
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	d0 df       	rcall	.-96     	; 0x38 <blink>
}
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
